{"ast":null,"code":"var _jsxFileName = \"/Users/jordanancheta/bidscopeio/src/components/PdfParse.js\";\nimport React from \"react\";\n\nclass PdfParse extends React.Component {\n  constructor() {\n    super();\n\n    this.submitPDF = () => {\n      // If absolute URL from the remote server is provided, configure the CORS\n      // header on that server.\n      var url = 'https://raw.githubusercontent.com/mozilla/pdf.js/ba2edeae/examples/learning/helloworld.pdf'; // Loaded via <script> tag, create shortcut to access PDF.js exports.\n\n      var pdfjsLib = window['pdfjs-dist/build/pdf']; // The workerSrc property shall be specified.\n\n      pdfjsLib.GlobalWorkerOptions.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.js'; // Asynchronous download of PDF\n\n      var loadingTask = pdfjsLib.getDocument(url);\n      loadingTask.promise.then(function (pdf) {\n        console.log('PDF loaded'); // Fetch the first page\n\n        var pageNumber = 1;\n        pdf.getPage(pageNumber).then(function (page) {\n          console.log('Page loaded');\n          var scale = 1.5;\n          var viewport = page.getViewport({\n            scale: scale\n          }); // Prepare canvas using PDF page dimensions\n\n          var canvas = document.getElementById('the-canvas');\n          var context = canvas.getContext('2d');\n          canvas.height = viewport.height;\n          canvas.width = viewport.width; // Render PDF page into canvas context\n\n          var renderContext = {\n            canvasContext: context,\n            viewport: viewport\n          };\n          var renderTask = page.render(renderContext);\n          renderTask.promise.then(function () {\n            console.log('Page rendered');\n          });\n        });\n      }, function (reason) {\n        // PDF loading error\n        console.error(reason);\n      });\n    };\n\n    this.state = {\n      text: \"\" // You only need this if you don't use an arrow function when creating a function\n      // this.submitPDF = this.submitPDF.bind(this);\n\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"section\", {\n      className: \"App-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Upload Your Plans\"), React.createElement(\"div\", {\n      className: \"form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      id: \"file\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"file\",\n      name: \"file\",\n      className: \"form-button\",\n      onClick: this.submitPDF,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Scan PDF\")))), React.createElement(\"section\", {\n      className: \"App section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      onClick: this.submitPDF,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, this.state.text), React.createElement(\"canvas\", {\n      id: \"the-canvas\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default PdfParse;","map":{"version":3,"sources":["/Users/jordanancheta/bidscopeio/src/components/PdfParse.js"],"names":["React","PdfParse","Component","constructor","submitPDF","url","pdfjsLib","window","GlobalWorkerOptions","workerSrc","loadingTask","getDocument","promise","then","pdf","console","log","pageNumber","getPage","page","scale","viewport","getViewport","canvas","document","getElementById","context","getContext","height","width","renderContext","canvasContext","renderTask","render","reason","error","state","text"],"mappings":"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","sourcesContent":["import React from \"react\";\n\n\nclass PdfParse extends React.Component {\n   \n    constructor() {\n      super();\n      this.state = {\n         text: \"\",\n      }\n      // You only need this if you don't use an arrow function when creating a function\n      // this.submitPDF = this.submitPDF.bind(this);\n   }\n   submitPDF = () => {\n   // If absolute URL from the remote server is provided, configure the CORS\n   // header on that server.\n      var url = 'https://raw.githubusercontent.com/mozilla/pdf.js/ba2edeae/examples/learning/helloworld.pdf';\n      // Loaded via <script> tag, create shortcut to access PDF.js exports.\n      var pdfjsLib = window['pdfjs-dist/build/pdf'];\n\n      // The workerSrc property shall be specified.\n      pdfjsLib.GlobalWorkerOptions.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.js';\n\n      // Asynchronous download of PDF\n      var loadingTask = pdfjsLib.getDocument(url);\n      loadingTask.promise.then(function(pdf) {\n      console.log('PDF loaded');\n      \n      // Fetch the first page\n      var pageNumber = 1;\n      pdf.getPage(pageNumber).then(function(page) {\n         console.log('Page loaded');\n         \n         var scale = 1.5;\n         var viewport = page.getViewport({scale: scale});\n\n         // Prepare canvas using PDF page dimensions\n         var canvas = document.getElementById('the-canvas');\n         var context = canvas.getContext('2d');\n         canvas.height = viewport.height;\n         canvas.width = viewport.width;\n\n         // Render PDF page into canvas context\n         var renderContext = {\n            canvasContext: context,\n            viewport: viewport\n         };\n         var renderTask = page.render(renderContext);\n         renderTask.promise.then(function () {\n            console.log('Page rendered');\n         });\n      });\n      }, function (reason) {\n      // PDF loading error\n      console.error(reason);\n      });\n   }\n\n   render() {\n      return (\n         <div>\n            <section className=\"App-content\">\n               <div>\n                  <h2>Upload Your Plans</h2>\n                     {/* <form className=\"form pdf-form\">\n                        <input type=\"text\"></input>\n                     </form> */}\n                  <div className=\"form\">\n                  <input type=\"file\" id=\"file\"/>\n                     <button type=\"file\" name=\"file\" className=\"form-button\" onClick={this.submitPDF}>Scan PDF</button>\n                  </div>\n               </div>\n            </section>\n            <section className=\"App section\">\n               <p onClick={this.submitPDF}>{this.state.text}</p>\n               <canvas id=\"the-canvas\"></canvas>\n            </section>\n          </div>\n      );\n   }\n}\n \n\n\nexport default PdfParse;\n"]},"metadata":{},"sourceType":"module"}