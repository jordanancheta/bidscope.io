{"ast":null,"code":"var PDFJS = null;\n\nfunction render_page(pageData) {\n  //check documents https://mozilla.github.io/pdf.js/\n  //ret.text = ret.text ? ret.text : \"\";\n  let render_options = {\n    //replaces all occurrences of whitespace with standard spaces (0x20). The default value is `false`.\n    normalizeWhitespace: false,\n    //do not attempt to combine same line TextItem's. The default value is `false`.\n    disableCombineTextItems: false\n  };\n  return pageData.getTextContent(render_options).then(function (textContent) {\n    let lastY,\n        text = ''; //https://github.com/mozilla/pdf.js/issues/8963\n    //https://github.com/mozilla/pdf.js/issues/2140\n    //https://gist.github.com/hubgit/600ec0c224481e910d2a0f883a7b98e3\n    //https://gist.github.com/hubgit/600ec0c224481e910d2a0f883a7b98e3\n\n    for (let item of textContent.items) {\n      if (lastY == item.transform[5] || !lastY) {\n        text += item.str;\n      } else {\n        text += '\\n' + item.str;\n      }\n\n      lastY = item.transform[5];\n    } //let strings = textContent.items.map(item => item.str);\n    //let text = strings.join(\"\\n\");\n    //text = text.replace(/[ ]+/ig,\" \");\n    //ret.text = `${ret.text} ${text} \\n\\n`;\n\n\n    return text;\n  });\n}\n\nconst DEFAULT_OPTIONS = {\n  pagerender: render_page,\n  max: 0,\n  //check https://mozilla.github.io/pdf.js/getting_started/\n  version: 'v1.10.100'\n};\n\nasync function PDF(dataBuffer, options) {\n  var isDebugMode = false;\n  let ret = {\n    numpages: 0,\n    numrender: 0,\n    info: null,\n    metadata: null,\n    text: \"\",\n    version: null\n  };\n  if (typeof options == 'undefined') options = DEFAULT_OPTIONS;\n  if (typeof options.pagerender != 'function') options.pagerender = DEFAULT_OPTIONS.pagerender;\n  if (typeof options.max != 'number') options.max = DEFAULT_OPTIONS.max;\n  if (typeof options.version != 'string') options.version = DEFAULT_OPTIONS.version;\n  if (options.version == 'default') options.version = DEFAULT_OPTIONS.version;\n  PDFJS = PDFJS ? PDFJS : require(\"./pdf.js/\".concat(options.version, \"/build/pdf.js\"));\n  ret.version = PDFJS.version; // Disable workers to avoid yet another cross-origin issue (workers need\n  // the URL of the script to be loaded, and dynamically loading a cross-origin\n  // script does not work).\n\n  PDFJS.disableWorker = true;\n  let doc = await PDFJS.getDocument(dataBuffer);\n  ret.numpages = doc.numPages;\n  let metaData = await doc.getMetadata().catch(function (err) {\n    return null;\n  });\n  ret.info = metaData ? metaData.info : null;\n  ret.metadata = metaData ? metaData.metadata : null;\n  let counter = options.max <= 0 ? doc.numPages : options.max;\n  counter = counter > doc.numPages ? doc.numPages : counter;\n  ret.text = \"\";\n\n  for (var i = 1; i <= counter; i++) {\n    let pageText = await doc.getPage(i).then(pageData => options.pagerender(pageData)).catch(err => {\n      // todo log err using debug\n      debugger;\n      return \"\";\n    });\n    ret.text = \"\".concat(ret.text, \"\\n\\n\").concat(pageText);\n  }\n\n  ret.numrender = counter;\n  doc.destroy();\n  return ret;\n}\n\nmodule.exports = PDF;","map":null,"metadata":{},"sourceType":"script"}